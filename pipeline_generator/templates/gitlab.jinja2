stages:
  - terragrunt-plan
  - terragrunt-apply

default:
  image: craftech/ci-tools:iac-tools-85d40e6

variables:
  TERRAPLAN_NAME: tfplan

.terragrunt_template: &terragrunt_template
  - mkdir -p ~/.ssh
  - echo "$GITLAB_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - eval $(ssh-agent -s)
  - ssh-add ~/.ssh/id_rsa
{% for extra_known_host in extra_known_hosts %}
  - ssh-keyscan -H {{ extra_known_host }} >> ~/.ssh/known_hosts
{% endfor %}
  - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  - LOCATION=$(echo ${CI_JOB_NAME} | cut -d":" -f2)
  - cd ${LOCATION}
{% if enable_asdf == "true" %}
  - apt update && apt-get install gnupg -y
  - git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2
  - . $HOME/.asdf/asdf.sh
  - asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git
  - asdf plugin-add terragrunt https://github.com/ohmer/asdf-terragrunt.git
  - asdf install
{% else %}
  - tfenv install
{% endif %}

.aws_cli_terragrunt_template:
  before_script:
    - *terragrunt_template
    - apt-get install awscli -y
    - KST=(`aws sts assume-role --role-arn ${ASSUME_ROLE} --role-session-name "deployment-${CI_PROJECT_NAME}" --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' --output text`)
    - export AWS_ACCESS_KEY_ID=${KST[0]}
    - export AWS_SECRET_ACCESS_KEY=${KST[1]}
    - export AWS_SESSION_TOKEN=${KST[2]}
    - export AWS_SECURITY_TOKEN=${KST[2]}

{% for account in account_list %}
.{{ account }}_terragrunt_plan_template:
  stage: terragrunt-plan
{% if assume_role[account] %}
  variables:
    AWS_DEFAULT_REGION: ${AWS_REGION}
    ASSUME_ROLE: {{ assume_role[account] }}
  extends: .aws_cli_terragrunt_template
{% else %}
  before_script:
    - *terragrunt_template
{% endif %}
  tags:
    - {{ tags_runner[account] }}
  script:
    - terragrunt plan --terragrunt-non-interactive -input=false -refresh=true -out=$TERRAPLAN_NAME

.{{ account }}_terragrunt_apply_template:
  stage: terragrunt-apply
{% if assume_role[account]  %}
  variables:
    AWS_DEFAULT_REGION: ${AWS_REGION}
    ASSUME_ROLE: {{ assume_role[account] }}
  extends: .aws_cli_terragrunt_template
{% else %}
  before_script:
    - *terragrunt_template
{% endif %}
  tags:
    - {{ tags_runner[account] }}
  when: manual
  script:
    - terragrunt apply -input=false -refresh=false -auto-approve=true $TERRAPLAN_NAME

{% endfor %}
{% for ci_path in ci_path_list  %}
terragrunt-plan:{{ ci_path.path.parent }}:
  extends: .{{ ci_path.account }}_terragrunt_plan_template
  variables:
    AWS_REGION: {{ ci_path.region|default(ci_path.account, true) }}
  only:
    refs:
      - {{ branch_name }}
    changes:
      - {{ ci_path.path.parent }}/*
  artifacts:
    paths:
      - {{ ci_path.path.parent }}/.terragrunt-cache
    expose_as: 'tfplan'
    expire_in: 1 day

terragrunt-apply:{{ ci_path.path.parent }}:
  extends: .{{ ci_path.account }}_terragrunt_apply_template
  variables:
     AWS_REGION: {{ ci_path.region|default(ci_path.account, true) }}
  only:
    refs:
      - {{ branch_name }}
    changes:
      - {{ ci_path.path.parent }}/*
  dependencies:
    - terragrunt-plan:{{ ci_path.path.parent }}

{% endfor %}